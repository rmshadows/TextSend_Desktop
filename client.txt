try {
            if (receiverTransmissionMode == 1) {
                // 重复赋值(暂未处理)
                ClientMessageController.connectionStat = 0;
                ClientMessageController.transmissionModeSet = 1;
                // 接收消息
                // 如果是-1说明连接已经断了
                byte[] readBuf = new byte[1024];
                int readLength;
                StringBuilder chunk = new StringBuilder();
                while ((readLength = bufferedInputStream.read(readBuf)) != -1) {
                    if (!TextSendMain.isClientConnected) {
                        break;
                    }
                    String read = new String(readBuf, 0, readLength, StandardCharsets.UTF_8);
                    chunk.append(read);
                    // 读取到JSON末尾
                    if (read.endsWith("}")) {
                        System.out.println("Receive obj: " + chunk);
                        // 这里开始处理
                        GsonMessage egm = GMToolsUtil.JSONtoGsonMessage(String.valueOf(chunk));
                        // 解密后的信息
                        GsonMessage cgm = MessageCrypto.gsonMessageDecrypt(egm);
                        if (getConnectionStat() == 0) {
                            // 获取ID
                            // 服务器发送的才接受
                            if (cgm != null && Objects.equals(cgm.getId(), ClientMessageController.SERVER_ID)) {
                                ClientMessageController.clientId = cgm.getNotes();
                                System.err.println("获取到服务器分配的ID：" + ClientMessageController.clientId);
                                // 发送支持的模式 格式：SUPPORT-{"supportMode":[1]}
                                String supportMode = "SUPPORT-" + ClientMessageController.SUPPORT_MODE;
                                ClientMessageController.sendMessageToServer(new Message(ClientMessageController.clientId, "", TextSendMain.MSG_LEN, supportMode));
                                // 进入接受传输模式
                                ClientMessageController.connectionStat = 1;
                            } else {
                                System.out.println("Drop id message (on get id) : " + cgm);
                            }
                        } else if (getConnectionStat() == 1) {
                            // 开始接受服务器发过来的传输模式
                            String[] tsp;
                            if (cgm != null) {
                                tsp = cgm.getNotes().split("-");
                                // 服务器发送的才接受 {"id":"-200","data":"","notes":"CONFIRM-1"}
                                // 判断服务器ID 且CONFIRM开头
                                if (Objects.equals(cgm.getId(), ClientMessageController.SERVER_ID) && Objects.equals(tsp[0], "CONFIRM")) {
                                    ClientMessageController.transmissionModeSet = Integer.parseInt(tsp[1]);
                                    receiverTransmissionMode = ClientMessageController.transmissionModeSet;
                                    System.err.println("获取到服务器传输模式：" + ClientMessageController.transmissionModeSet);
                                    // 进入通讯模式
                                    ClientMessageController.connectionStat = 2;
                                }
                                else {
                                    // 丢弃的信息
                                    System.out.println("Drop id message (on get modeSet) : " + cgm);
                                }
                            }
                        } else {
                            if (cgm != null) {
                                // 服务器发送的才接受
                                if (Objects.equals(cgm.getId(), ClientMessageController.SERVER_ID)) {
                                    if (cgm.getNotes().equals(ClientMessageController.FB_MSG)) {
                                        // 处理反馈信息
                                        System.out.println("服务器收到了消息。");
                                        TextSendMain.cleanTextArea();
                                    } else {
                                        StringBuilder text = new StringBuilder();
                                        for (String c: cgm.getData()) {
                                            text.append(c);
                                        }
                                        // 反馈服务器 注意：仅代表客户端收到信息
                                        messageFeedBack();
                                        System.out.println("收到服务器的消息："+text);
                                        copyToClickboard(text.toString());
                                        pasteReceivedMessage();
                                    }
                                } else {
                                    // 丢弃的常规通讯信息
                                    System.out.println("Drop id message (json mode) : " + cgm);
                                }
                            }
                        }
                        // reset chunk
                        chunk = new StringBuilder();
                    }
                }
                System.out.println("Socket has ended.");
                ClientMessageController.connectionStat = -1;
                TextSendMain.isClientConnected = false;
            } else if (receiverTransmissionMode == 2) {
                System.err.println("OBJJJJJJJJJJJJJJJJJJJJJJJ");
                // 传输对象
                // 连接还在的时候才会继续
                while (TextSendMain.isClientConnected) {
                    // 断开操作在TextSendMain中实现 这里已经解密成明文GM了
                    GsonMessage cgm = MessageCrypto.gsonMessageDecrypt((GsonMessage) objectInputStream.readObject());
                    if(cgm != null){
                        // 判断服务器ID
                        if (Objects.equals(cgm.getId(), ClientMessageController.SERVER_ID)) {
                            // 如果是服务器的反馈信息
                            if (cgm.getNotes().equals(ClientMessageController.FB_MSG)) {
                                // 处理反馈信息
                                System.out.println("服务器收到了消息。");
                                TextSendMain.cleanTextArea();
                            } else {
                                StringBuilder text = new StringBuilder();
                                for (String c: cgm.getData()) {
                                    text.append(c);
                                }
                                // 反馈服务器
                                messageFeedBack();
                                System.out.println("收到服务器的消息："+text);
                                copyToClickboard(text.toString());
                                pasteReceivedMessage();
                            }
                        }
                    }
                }
            } else {
                throw new IOException("Modeset error.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            TextSendMain.isClientConnected = false;
        }
