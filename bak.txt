@Override
    public void run() {
        try {
            if (receiverTransmissionMode == 1) {
                // 接收消息
                // 如果是-1说明连接已经断了
                byte[] readBuf = new byte[1024];
                int readLength;
                StringBuilder chunk = new StringBuilder();
                while ((readLength = bufferedInputStream.read(readBuf)) != -1) {
                    // 如果服务停止
                    if (serverMessageController.getConnectionStat() == -2 && !TextSendMain.isServerRunning()) {
                        break;
                    }
                    String read = new String(readBuf, 0, readLength, StandardCharsets.UTF_8);
                    chunk.append(read);
                    // 读取到JSON末尾
                    if (read.endsWith("}")) {
                        System.out.println("1:Received chunk: " + chunk);
                        // 这里开始处理
                        GsonMessage egm = GMToolsUtil.JSONtoGsonMessage(String.valueOf(chunk));
                        // 解密后的信息
                        GsonMessage cgm = MessageCrypto.gsonMessageDecrypt(egm);
                        if (serverMessageController.getConnectionStat() == 0) {
                            // 获取客户端支持的模式
                            if (cgm != null && Objects.equals(cgm.getId(), serverMessageController.getClientId())) {// 客户端发送的才接受
                                // Notes: {"id":"553126963","data":"","notes":"SUPPORT-{"supportMode":[1]}"}
                                String[] ts = cgm.getNotes().split("-");
                                // 如果是SUPPORT开头
                                if (Objects.equals(ts[0], "SUPPORT")) {
                                    // 读取客户端发送的JSON {"supportMode":[1]}
                                    // 发送决定后的传输模式 格式： "CONFIRM-" + clientMode"
                                    String selectedMode = selectClientMode(ts[1]);
                                    String allocationMode = "CONFIRM-" + selectedMode;
                                    // 发送决定后的传输模式(先发送再修改传输模式)
                                    serverMessageController.sendMessage(new Message(TextSendMain.SERVER_ID, null, TextSendMain.MSG_LEN, allocationMode));
                                    if (selectedMode != null) {
                                        serverMessageController.setTransmissionModeSet(Integer.parseInt(selectedMode));
                                    } else {
                                        throw new Exception("客户端支持传输模式不支持，连接配置失败。");
                                    }
                                    // 收到客户端发送的模式清单，说明客户端接受了ID请求，状态直接0变为2。 注意：直接进入接受传输模式交流
                                    serverMessageController.setConnectionStat(2);
                                    System.err.printf("用户 %s (%s) 已上线。%n",
                                            serverMessageController.clientIP,
                                            serverMessageController.getClientId());
                                    // 设置接收器模式(启动obj)
                                    receiverTransmissionMode = 2;
                                    // 因为不能同时获取两个流，所以把前者包装成后者
                                    objectInputStream = new ObjectInputStream(bufferedInputStream);
                                } else {
                                    System.out.println("1:Drop id message (on get support mode :support mode error.) : " + cgm);
                                }
                            } else {
                                System.out.println("1:Drop id message (on get support mode :id wrong) : " + cgm);
                            }
                        } else {
                            if (cgm != null) {
                                // 客户端发送的才接受
                                if (Objects.equals(cgm.getId(), serverMessageController.getClientId())) {
                                    if (cgm.getNotes().equals(ServerMessageController.FB_MSG)) {
                                        // 处理反馈信息
                                        System.out.println("1:客户端收到了消息。");
                                        TextSendMain.cleanTextArea();
                                    } else {
                                        StringBuilder text = new StringBuilder();
                                        for (String c : cgm.getData()) {
                                            text.append(c);
                                        }
                                        // 反馈客户端 注意：仅代表服务端收到信息
                                        serverMessageController.messageFeedBack();
                                        System.out.println("1:Received: " + serverMessageController.clientIP
                                                + "(" + serverMessageController.getClientId() + ") <- " + text);
                                        copyToClickboard(text.toString());
                                        pasteReceivedMessage();
                                    }
                                } else {
                                    // 丢弃的常规通讯信息
                                    System.out.println("1:Drop id message (json mode) : " + cgm);
                                }
                            }
                        }
                        // reset chunk
                        chunk = new StringBuilder();
                    }
                }
                System.out.println("1:Socket has ended.");
                serverMessageController.setConnectionStat(-1);
                TextSendMain.isClientConnected = false;
            } else if (receiverTransmissionMode == 2) {
                System.err.println("=================================222");
                // 传输对象 传输对象的时候已经进入正常通信了
                // -2 表示连接断开了 只有服务在运行、客户端没断开才会继续监听
                while (serverMessageController.getConnectionStat() != -2 && TextSendMain.isServerRunning()) {
                    // 断开操作在TextSendMain中实现 这里已经解密成明文GM了
                    GsonMessage cgm = MessageCrypto.gsonMessageDecrypt((GsonMessage) objectInputStream.readObject());
                    if (cgm != null) {
                        // 判断客户端ID
                        if (Objects.equals(cgm.getId(), serverMessageController.getClientId())) {
                            // 如果是客户端的反馈信息
                            if (cgm.getNotes().equals(ServerMessageController.FB_MSG)) {
                                // 处理反馈信息
                                System.out.println("2:客户端收到了消息。");
                                TextSendMain.cleanTextArea();
                            } else {
                                StringBuilder text = new StringBuilder();
                                for (String c : cgm.getData()) {
                                    text.append(c);
                                }
                                // 反馈服务器
                                serverMessageController.messageFeedBack();
                                System.out.println("2:反馈: " + serverMessageController.clientIP
                                        + "(" + serverMessageController.getClientId() + ") <- " + text);
                                copyToClickboard(text.toString());
                                pasteReceivedMessage();
                            }
                        }
                    }
                }
            } else {
                throw new IOException("Modeset error.");
            }
        } catch (Exception e) {
            // 出错断开当前连接
            e.printStackTrace();
            // 直接设置状态-2 会在finally中结束当前Socket
            serverMessageController.setConnectionStat(-2);
        } finally {
            // 状态为-2 且服务端停止运行
            if (serverMessageController.getConnectionStat() == -2 && !TextSendMain.isServerRunning()) {
                serverMessageController.closeCurrentClientSocket();
            }
        }
    }
